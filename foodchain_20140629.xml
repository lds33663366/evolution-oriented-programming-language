<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy v2013 (http://www.altova.com)-->
<system xsi:noNamespaceSchemaLocation="mdl20140629.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    <!-- 定义5只狮子, 包含的属性: 年龄, 性别, 生命, 地理位置.  -->
    <instance name="lion" popsize="6">
        <property>
            <int name="age" value="1" /> <!--默认狮子年龄都为1-->
            <string name="gender"/> <!--狮子的性别, 需要一个action对其初始化-->
            <int name="life" value="6"/> <!--默认狮子生命都为15-->
            <instance name="position"> <!--狮子的地理位置(仅用于测试, 体现一个instance能够包含另一个instance-->
                <property>
                    <int name="x"/>
                    <int name="y"/>
                </property>
            </instance> 
        </property>

        <action name="initialize_gender" function="initialize_gender" type="self" cycle="only"> <!--初始化性别-->
			<input name="gender"/>
			<output name="gender"/>
        </action> 
        <action name="NEW" function="NEW" type="self"/>
        <action name="DEAD" function="DEAD" type="self"/> <!--狮子死亡, 死亡判断条件由用户编写函数时定义好-->
        <action name="age_increment" function="age_increment" type="subscription"><!--狮子收到系统消息时, 年龄将+1. 函数体由用户定义-->
			<input name="age"/>
			<output name="age"/>
        </action> 
        <action name="eat_zebra" function="eat_zebra" type="publish"/> <!--发出吃斑马的消息, 类型规定为publish时将发出消息.该消息内容为空-->
    </instance>

    <!-- 定义100只斑马, 包含的属性: 年龄, 性别, 生命, 地理位置.  -->
    <instance name="zebra" popsize="20">
        <property>
            <int name="age" value="1"/> <!--默认斑马年龄都为1-->
            <string name="gender"/> <!--斑马的性别, 需要一个action对其初始化-->
            <int name="life" value="6"/> <!--默认斑马生命都为10-->
            <instance name="position"> <!--斑马的地理位置(仅用于测试, 体现一个instance能够包含另一个instance-->
                <property>
                    <int name="x"/>
                    <int name="y"/>
                </property>
            </instance> 
        </property>     
        
        <action name="initialize_gender" function="initialize_gender" type="self" cycle="only"> <!--初始化性别-->
			<input name="gender"/>
			<output name="gender"/>
        </action> 
        <action name="NEW" function="NEW" type="self"/>
        <action name="DEAD" function="DEAD" type="self"/> <!--斑马死亡, 死亡判断条件由用户编写函数时定义好-->
        <action name="age_increment" function="age_increment" type="subscription"><!--狮子收到系统消息时, 年龄将+1. 函数体由用户定义-->
			<input name="age"/>
			<output name="age"/>
        </action> 
		<action name="lion_eat" function="DEAD" type="listen"/>
    </instance>


    <!--吃斑马的消息, 明确了from: 消息源; life: 消息的存活时间; share: 可由多少实体访问. -->
    <message name="eat_zebra" from="lion" life="1s" share="1" second="0"/>
    <!--系统将发送年龄增长消息. 所有对此监听的实体年龄将+1. 
    该消息要确保所有该监听端口必须拿到消息, 该消息将每隔一段时间再发送,
    属性time=10: 现假定该消息将发送10次, 即动物们的年龄最终增加10岁-->
     <message name="age_increment" from="SYSTEM" frequency="10" second="3" />
    <!--系统终止消息, 所有实体将接收到此消息, 并将数据存入数据库. 
    属性second=100: 系统将于100秒后终止程序-->
    <message name="END" from="SYSTEM" second="5" />

    <relation>
        <message name="eat_zebra"> <!--eat_zebra消息关联的接收接口为zebra下的lion_eat监听端-->
            <node iName="zebra" aName="lion_eat"/> 
        </message>

        <!--系统的年龄增长通知将传给lion和zebra的age_increment监听action-->
        <message name="age_increment">
            <node iName="lion" aName="age_increment"/>
            <node iName="zebra" aName="age_increment"/>
        </message>
    </relation>
</system>
